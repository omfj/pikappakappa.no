// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  type          Role      @default(USER)
  biography     String?   @db.Text
  image         String?
  accounts      Account[]
  sessions      Session[]
}

enum Role {
  ADMIN
  USER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Member {
  id        String            @id @default(cuid())
  email     String
  name      String
  socials   SocialAccount[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  visits    VisitMembership[]
}

enum SocialProvider {
  TWITTER
  GITHUB
  LINKEDIN
  INSTAGRAM
}

model SocialAccount {
  id       String         @id @default(cuid())
  provider SocialProvider
  url      String
  Member   Member?        @relation(fields: [memberId], references: [id])
  memberId String?
}

model Visit {
  id       String            @id @default(cuid())
  name     String
  email    String
  reason   String            @db.Text
  visiting VisitMembership[]
}

model VisitMembership {
  visitId  String
  memberId String
  member   Member @relation(fields: [memberId], references: [id])
  visit    Visit  @relation(fields: [visitId], references: [id])

  @@id([visitId, memberId])
}
